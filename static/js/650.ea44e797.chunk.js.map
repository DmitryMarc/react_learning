{"version":3,"file":"static/js/650.ea44e797.chunk.js","mappings":"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","sources":["webpack://react-training-1/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","webpack://react-training-1/./src/Components/Profile/ProfileInfo/ProfileDataForm.module.css?3258","Components/Profile/ProfileInfo/ProfileDataForm.tsx","../node_modules/@ant-design/icons-svg/es/asn/UploadOutlined.js","../node_modules/@ant-design/icons/es/icons/UploadOutlined.js","../node_modules/@ant-design/icons-svg/es/asn/EditOutlined.js","../node_modules/@ant-design/icons/es/icons/EditOutlined.js","Components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://react-training-1/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","webpack://react-training-1/./src/Components/Profile/MyPosts/Post/Post.module.css?54ab","../node_modules/@ant-design/icons-svg/es/asn/LikeOutlined.js","../node_modules/@ant-design/icons/es/icons/LikeOutlined.js","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/Profile.tsx","Redux/selectors/profile-selectors.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Inoui\",\"photo\":\"ProfileInfo_photo__6k+u3\",\"mainPhoto\":\"ProfileInfo_mainPhoto__C+0Qe\",\"fullName\":\"ProfileInfo_fullName__xBt98\",\"informationItem\":\"ProfileInfo_informationItem__wFndW\",\"contact\":\"ProfileInfo_contact__gQ6n5\",\"contactTitle\":\"ProfileInfo_contactTitle__vbpAq\",\"uploadFile\":\"ProfileInfo_uploadFile__-TPa1\",\"uploadIconWrapper\":\"ProfileInfo_uploadIconWrapper__9i430\",\"uploadIcon\":\"ProfileInfo_uploadIcon__HheZ5\",\"profileInformation\":\"ProfileInfo_profileInformation__+RU8k\",\"informationTitleItem\":\"ProfileInfo_informationTitleItem__s4YFR\",\"editProfileBtn\":\"ProfileInfo_editProfileBtn__VL6-1\",\"editProfileBtnWrapper\":\"ProfileInfo_editProfileBtnWrapper__G-2LI\"};","import { useState, useEffect, FC, ChangeEvent } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateStatusThunkCreator } from '../../../Redux/profile-reducer';\r\nimport { AppDispatchType } from '../../../Redux/redux-store';\r\nimport { selectStatus } from '../../../Redux/selectors/profile-selectors';\r\nimport styles from './ProfileInfo.module.css';\r\n\r\ntype ProfileStatusPropsType = {\r\n    isOwner: boolean\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<ProfileStatusPropsType> = ({isOwner}) => {\r\n    let globalStatus = useSelector(selectStatus);\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(globalStatus);\r\n    let dispatch: AppDispatchType = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setStatus(globalStatus);\r\n        setEditMode(false);\r\n    }, [globalStatus])\r\n\r\n    const activateEditMode = () => {\r\n        if (isOwner) {\r\n            setEditMode(true);\r\n        }\r\n    }\r\n    const deactivateEditMode = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.currentTarget.value === globalStatus) {\r\n            setEditMode(false);\r\n        }\r\n        dispatch(updateStatusThunkCreator(status));\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b className={styles.informationItem}>Status:</b> <span onDoubleClick={activateEditMode}>\r\n                        {globalStatus || \"-----\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                        autoFocus={true} onBlur={deactivateEditMode}\r\n                        value={status}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","// extracted by mini-css-extract-plugin\nexport default {\"contactsFormWrapper\":\"ProfileDataForm_contactsFormWrapper__dIXOv\",\"lookingForAJobCheckbox\":\"ProfileDataForm_lookingForAJobCheckbox__mK8Vs\",\"saveBtn\":\"ProfileDataForm_saveBtn__Wj4xk\"};","import style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { createField, GetStringKeysType, Input, Textarea }\r\n    from \"../../common/FormsControls/FormsControls\";\r\nimport { Dispatch, FC, SetStateAction } from 'react';\r\nimport { ProfileType } from '../../../types/types';\r\nimport stylesInfo from './ProfileInfo.module.css';\r\nimport stylesDataForm from './ProfileDataForm.module.css';\r\nimport { Button } from \"antd\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n    setIsContacts: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeysType<ProfileType>;\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType>\r\n    & ProfileDataFormPropsType> =\r\n    ({ handleSubmit, profile, error, setIsContacts }) => {\r\n        return (\r\n            <form onSubmit={handleSubmit} className={stylesInfo.profileInformation}>\r\n                {error && <div className={style.formSummaryError}>\r\n                    {error}\r\n                </div>\r\n                }\r\n                <div className={stylesInfo.informationItem}>\r\n                    <b className={stylesInfo.informationTitleItem}>Full name:</b>\r\n                    {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n                </div>\r\n                <div className={stylesInfo.informationItem}>\r\n                    <b className={stylesInfo.informationTitleItem}>Looking for a job: </b>\r\n                    <div className={stylesDataForm.lookingForAJobCheckbox}>\r\n                        {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [],\r\n                            Input, { type: \"checkbox\" })}\r\n                    </div>\r\n                </div>\r\n                <div className={stylesInfo.informationItem}>\r\n                    <b className={stylesInfo.informationTitleItem}>My professional skills:</b>\r\n                    {createField<ProfileTypeKeys>(\"My professional skills\",\r\n                        \"lookingForAJobDescription\", [], Textarea)}\r\n                </div>\r\n                <div className={stylesInfo.informationItem}>\r\n                    <b className={stylesInfo.informationTitleItem}>About me:</b>\r\n                    {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n                </div>\r\n                <div className={stylesDataForm.contactsFormWrapper}>\r\n                    <b className={stylesInfo.informationTitleItem}>Contacts:</b>\r\n                    {Object.keys(profile.contacts).map(key => {\r\n                        return (\r\n                            <div key={key} className={stylesInfo.contact}>\r\n                                {/* todo: create some solution for embedded objects */}\r\n                                <b>{key}:</b> {createField(key, \"contacts.\" + key, [], Input)}\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n                <div>\r\n                    {/* <button className={stylesDataForm.saveBtn} onClick={() => {\r\n                        //если данные контактов есть\r\n                        if (profile.contacts) {\r\n                            setIsContacts(true)\r\n                        }\r\n                    }}>save</button> */}\r\n                    <Button htmlType=\"submit\" onClick={() => {\r\n                        //если данные контактов есть\r\n                        if (profile.contacts) {\r\n                            setIsContacts(true)\r\n                        }\r\n                    }} style={{ float: \"right\" }}>Save</Button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>(\r\n    { form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;","// This icon file is generated automatically.\nvar UploadOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M400 317.7h73.9V656c0 4.4 3.6 8 8 8h60c4.4 0 8-3.6 8-8V317.7H624c6.7 0 10.4-7.7 6.3-12.9L518.3 163a8 8 0 00-12.6 0l-112 141.7c-4.1 5.3-.4 13 6.3 13zM878 626h-60c-4.4 0-8 3.6-8 8v154H214V634c0-4.4-3.6-8-8-8h-60c-4.4 0-8 3.6-8 8v198c0 17.7 14.3 32 32 32h684c17.7 0 32-14.3 32-32V634c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"upload\", \"theme\": \"outlined\" };\nexport default UploadOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport UploadOutlinedSvg from \"@ant-design/icons-svg/es/asn/UploadOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar UploadOutlined = function UploadOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: UploadOutlinedSvg\n  }));\n};\nUploadOutlined.displayName = 'UploadOutlined';\nexport default /*#__PURE__*/React.forwardRef(UploadOutlined);","// This icon file is generated automatically.\nvar EditOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M257.7 752c2 0 4-.2 6-.5L431.9 722c2-.4 3.9-1.3 5.3-2.8l423.9-423.9a9.96 9.96 0 000-14.1L694.9 114.9c-1.9-1.9-4.4-2.9-7.1-2.9s-5.2 1-7.1 2.9L256.8 538.8c-1.5 1.5-2.4 3.3-2.8 5.3l-29.5 168.2a33.5 33.5 0 009.4 29.8c6.6 6.4 14.9 9.9 23.8 9.9zm67.4-174.4L687.8 215l73.3 73.3-362.7 362.6-88.9 15.7 15.6-89zM880 836H144c-17.7 0-32 14.3-32 32v36c0 4.4 3.6 8 8 8h784c4.4 0 8-3.6 8-8v-36c0-17.7-14.3-32-32-32z\" } }] }, \"name\": \"edit\", \"theme\": \"outlined\" };\nexport default EditOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport EditOutlinedSvg from \"@ant-design/icons-svg/es/asn/EditOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar EditOutlined = function EditOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: EditOutlinedSvg\n  }));\n};\nEditOutlined.displayName = 'EditOutlined';\nexport default /*#__PURE__*/React.forwardRef(EditOutlined);","import Preloader from '../../common/Preloader/Preloader';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport {\r\n    ChangeEvent, Dispatch, FC, SetStateAction,\r\n    useEffect, useState\r\n} from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\nimport { savePhotoThunkCreator, saveProfileThunkCreator }\r\n    from '../../../Redux/profile-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatchType } from '../../../Redux/redux-store';\r\nimport { selectProfile } from '../../../Redux/selectors/profile-selectors';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport styles from './ProfileInfo.module.css'\r\nimport { EditOutlined } from '@ant-design/icons'\r\nimport { selectIsAuth } from '../../../Redux/selectors/auth-selectors';\r\nimport { Button } from 'antd';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { addNewDialogThunkCreator, setMessagesWithUserThunkCreator } from '../../../Redux/dialogs-reducer';\r\n\r\ntype ProfileInfoPropsType = {\r\n    isOwner: boolean,\r\n}\r\n\r\nconst ProfileInfo: FC<ProfileInfoPropsType> = ({ isOwner }) => {\r\n    // Для отображения состояния контактов (вынесли сюда, чтобы работать с двумя дочерними компонентами)\r\n    const [isContacts, setIsContacts] = useState<boolean>(false);\r\n    let profile = useSelector(selectProfile);\r\n    let [editMode, setEditMode] = useState(false);\r\n    let dispatch: AppDispatchType = useDispatch();\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            dispatch(savePhotoThunkCreator(e.target.files[0]));\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        dispatch(saveProfileThunkCreator(formData));\r\n    }\r\n\r\n    useEffect(() => {\r\n        // закрываем редактирование, когда приходит профиль\r\n        setEditMode(false);\r\n    }, [profile])\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div className={styles.descriptionBlock}>\r\n                <div className={styles.photo}>\r\n                    <img src={profile.photos.small || userPhoto}\r\n                        className={styles.mainPhoto} />\r\n                    {/* {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />} */}\r\n                    {isOwner &&\r\n                        <label className={styles.uploadIconWrapper}>\r\n                            <input name=\"file\" type=\"file\" className={styles.uploadFile}\r\n                                onChange={onMainPhotoSelected} />\r\n                            <span className={styles.uploadIconWrapper}><UploadOutlined\r\n                                className={styles.uploadIcon} /></span>\r\n                        </label>\r\n                    }\r\n                </div>\r\n\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile}\r\n                        profile={profile} onSubmit={onSubmit} setIsContacts={setIsContacts} />\r\n                    : <ProfileData profile={profile} isOwner={isOwner}\r\n                        goToEditMode={() => { setEditMode(true) }}\r\n                        isContacts={isContacts} setIsContacts={setIsContacts} />\r\n                }\r\n\r\n                {/* <ProfileStatusWithHooks /> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    isContacts: boolean\r\n    profile: ProfileType,\r\n    isOwner: boolean,\r\n    goToEditMode: () => void,\r\n    setIsContacts: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst ProfileData: FC<ProfileDataPropsType> = ({ profile, isOwner,\r\n    goToEditMode, isContacts, setIsContacts }) => {\r\n    const dispatch: AppDispatchType = useDispatch();\r\n    const params: { userId: string } = useParams();\r\n    const history = useHistory();\r\n    // if (!isOwner) {\r\n    //     return <Preloader />\r\n    // }\r\n\r\n    // Чтобы \"обнулялся\" state при вымонтировании компонента (аналог componentWillUnmount)\r\n    useEffect(() => {\r\n        return setIsContacts(false);\r\n    }, [])\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(addNewDialogThunkCreator(+params.userId));\r\n        history.push(`/dialogs/${+params.userId}/messages`);\r\n        dispatch(setMessagesWithUserThunkCreator(+params.userId));\r\n    }\r\n\r\n    \r\n    return (\r\n        <div className={styles.profileInformation}>\r\n            <div className={styles.fullName}>\r\n                <h3>{profile.fullName}</h3>\r\n            </div>\r\n            {isOwner &&\r\n                <span className={styles.editProfileBtnWrapper}>\r\n                    edit profile <button className={styles.editProfileBtn}\r\n                        onClick={goToEditMode}><EditOutlined /></button>\r\n                </span>\r\n            }\r\n            <ProfileStatusWithHooks isOwner={isOwner} />\r\n            <hr />\r\n            <div className={styles.informationItem}>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div className={styles.informationItem}>\r\n                    <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div className={styles.informationItem}>\r\n                <b>About me:</b> {profile.aboutMe}\r\n                {!profile.aboutMe && \"-----\"}\r\n            </div>\r\n            <div className={styles.informationItem}>\r\n                <b>Contacts:</b> {!isContacts && \"-----\"}\r\n                {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact setIsContacts={setIsContacts} contactTitle={key}\r\n                        contactValue={profile.contacts[key as keyof ContactsType]} />\r\n                })}\r\n            </div>\r\n            {!isOwner &&\r\n                <div className={styles.informationItem}>\r\n                    <Button onClick={onClickHandler}>Write message</Button>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n    setIsContacts: Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Contact: FC<ContactType> = ({ contactTitle, contactValue, setIsContacts }) => {\r\n    if (!contactValue) {\r\n        return null;\r\n    } else {\r\n        setIsContacts(true);\r\n    }\r\n    return (\r\n        <div className={styles.contact}>\r\n            <b className={styles.contactTitle}>{contactTitle}:</b> {contactValue}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__9cSVL\",\"posts\":\"MyPosts_posts__TPsYA\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__+5aXk\",\"likesCounterWrapper\":\"Post_likesCounterWrapper__0OcPO\",\"likeIcon\":\"Post_likeIcon__bbq6T\",\"likedPost\":\"Post_likedPost__YyT69\"};","// This icon file is generated automatically.\nvar LikeOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M885.9 533.7c16.8-22.2 26.1-49.4 26.1-77.7 0-44.9-25.1-87.4-65.5-111.1a67.67 67.67 0 00-34.3-9.3H572.4l6-122.9c1.4-29.7-9.1-57.9-29.5-79.4A106.62 106.62 0 00471 99.9c-52 0-98 35-111.8 85.1l-85.9 311H144c-17.7 0-32 14.3-32 32v364c0 17.7 14.3 32 32 32h601.3c9.2 0 18.2-1.8 26.5-5.4 47.6-20.3 78.3-66.8 78.3-118.4 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7 0-12.6-1.8-25-5.4-37 16.8-22.2 26.1-49.4 26.1-77.7-.2-12.6-2-25.1-5.6-37.1zM184 852V568h81v284h-81zm636.4-353l-21.9 19 13.9 25.4a56.2 56.2 0 016.9 27.3c0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4a56.2 56.2 0 016.9 27.3c0 16.5-7.2 32.2-19.6 43l-21.9 19 13.9 25.4a56.2 56.2 0 016.9 27.3c0 22.4-13.2 42.6-33.6 51.8H329V564.8l99.5-360.5a44.1 44.1 0 0142.2-32.3c7.6 0 15.1 2.2 21.1 6.7 9.9 7.4 15.2 18.6 14.6 30.5l-9.6 198.4h314.4C829 418.5 840 436.9 840 456c0 16.5-7.2 32.1-19.6 43z\" } }] }, \"name\": \"like\", \"theme\": \"outlined\" };\nexport default LikeOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport LikeOutlinedSvg from \"@ant-design/icons-svg/es/asn/LikeOutlined\";\nimport AntdIcon from '../components/AntdIcon';\nvar LikeOutlined = function LikeOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: LikeOutlinedSvg\n  }));\n};\nLikeOutlined.displayName = 'LikeOutlined';\nexport default /*#__PURE__*/React.forwardRef(LikeOutlined);","import { FC, useState } from 'react';\r\nimport styles from './Post.module.css';\r\nimport { Col, message, Row } from 'antd';\r\nimport { LikeOutlined } from '@ant-design/icons';\r\nimport { AppDispatchType, AppStateType } from '../../../../Redux/redux-store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { actions } from '../../../../Redux/profile-reducer';\r\n\r\ntype PostPropsType = {\r\n    id: number,\r\n    message: string,\r\n    likesCount: number,\r\n    isLiked: boolean,\r\n    userPhoto: string | null | undefined\r\n}\r\n\r\nconst Post: FC<PostPropsType> = ({id,message,likesCount, isLiked, userPhoto}) => {\r\n    const dispatch: AppDispatchType = useDispatch();\r\n    const onClickLikeHandler = () => {\r\n        if (!isLiked) {\r\n            dispatch(actions.clickLikeActionCreator(id, likesCount + 1, true));\r\n        } else {\r\n            dispatch(actions.clickLikeActionCreator(id, likesCount - 1, false));\r\n\r\n        }\r\n    }\r\n    return (\r\n        <div className={styles.item}>\r\n            <Row gutter={[0, 6]}>\r\n                <Col span={24}>\r\n                    <img src={userPhoto as string | undefined} alt=\"avatar\" />\r\n                </Col>\r\n                <Col span={1}>\r\n                </Col>\r\n                <Col span={23}>\r\n                    {message}\r\n                </Col>\r\n                <Col span={1}>\r\n                </Col>\r\n                <Col span={23}>\r\n                    <div className={styles.likesCounterWrapper}>\r\n                        <LikeOutlined onClick={onClickLikeHandler} \r\n                        className={`${styles.likeIcon} ${isLiked && styles.likedPost}`} \r\n                        /> {likesCount}\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import styles from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport React, { FC, useEffect, useState } from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { required } from '../../../utils/validators/validators';\r\nimport { createField, GetStringKeysType, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { PostType } from '../../../types/types';\r\nimport { actions } from '../../../Redux/profile-reducer';\r\nimport { AppDispatchType } from '../../../Redux/redux-store';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectPostsData, selectProfilePhoto } from '../../../Redux/selectors/profile-selectors';\r\nimport { Button } from 'antd';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\n\r\ntype AddPostFormValuesType = {\r\n    newPostText: string,\r\n}\r\n\r\nconst MyPosts: FC = React.memo(() => {\r\n    const [actualUserPhoto, setActualUserPhoto] = useState<string | null | undefined>(null);\r\n    const userPhoto = useSelector(selectProfilePhoto)\r\n    const postsData = useSelector(selectPostsData);\r\n    const dispatch: AppDispatchType = useDispatch();\r\n\r\n    useEffect(() => {\r\n        setActualUserPhoto(userPhoto);\r\n    }, [userPhoto])\r\n\r\n    let postsElements = postsData.map(post =>\r\n        <Post key={post.id} id={post.id} isLiked={post.isLiked} userPhoto={actualUserPhoto}\r\n            message={post.message} likesCount={post.likesCount} />\r\n    );\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        dispatch(actions.addPostActionCreator(values.newPostText));\r\n    }\r\n\r\n    if (!postsData) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div className={styles.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <div className={styles.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeysType<AddPostFormValuesType>;\r\n\r\ntype AddNewPostFormPropsType = {\r\n}\r\n\r\nlet AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType &\r\n    AddNewPostFormPropsType> & AddNewPostFormPropsType> = (props) => {\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <div>\r\n                    {createField<AddPostFormValuesTypeKeys>(\"Post message\", \"newPostText\", [required], Textarea)}\r\n                    {/* name=\"newPostText\" validate={[required, maxLengt10]} /> */}\r\n                </div>\r\n                <div>\r\n                    {/* <button>Add post</button> */}\r\n                    <Button htmlType=\"submit\"\r\n                        style={{ float: \"right\" }}>Save</Button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n\r\nlet AddNewPostFormRedux = reduxForm<AddPostFormValuesType, AddNewPostFormPropsType>({\r\n    form: \"ProfileAddNewPostForm\"\r\n})(AddNewPostForm);\r\n\r\nexport default MyPosts;\r\n","import { FC, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport {\r\n    getStatusThunkCreator,\r\n    getUserProfileThunkCreator,\r\n} from '../../Redux/profile-reducer';\r\nimport { AppDispatchType, AppStateType } from '../../Redux/redux-store';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport { selectAuthorizedUserId } from '../../Redux/selectors/auth-selectors';\r\nimport { Col, Row } from 'antd';\r\n\r\nexport const Profile: FC<RouteComponentProps<{ userId: string }>> = (props) => {\r\n    let authorizedUserId = useSelector(selectAuthorizedUserId);\r\n    // const isAuth = useSelector((state:AppStateType) => state.auth.isAuth);\r\n\r\n    const dispatch: AppDispatchType = useDispatch();\r\n\r\n    const refreshProfile = () => {\r\n        let userId: number | null = +props.match.params.userId;\r\n        if (!userId) {\r\n            userId = authorizedUserId; //Мой профиль!!!\r\n            if (!userId) {\r\n                //todo: maybe replace push with Redirect???\r\n                //редирект на логин, если нет id юзера (мой id)\r\n                props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"Id should exists in URL params or in state ('authorizedUserId')\");\r\n        }\r\n        else {\r\n            dispatch(getUserProfileThunkCreator(userId));\r\n            dispatch(getStatusThunkCreator(userId));\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        refreshProfile();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        //if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n        refreshProfile();\r\n    }, [props.match.params.userId])\r\n\r\n    const isOwner: boolean = +props.match.params.userId === authorizedUserId;\r\n\r\n    return (\r\n        <Row gutter={[1, 0]}>\r\n            <Col span={12}>\r\n                <ProfileInfo isOwner={isOwner} />\r\n            </Col>\r\n            <Col span={12}></Col>\r\n            <Col span={8}>\r\n                {isOwner &&\r\n                    <MyPosts />\r\n                }\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\nexport default withRouter(Profile);\r\n\r\n","import { AppStateType } from \"../redux-store\";\r\n\r\nexport const selectProfile = (state: AppStateType) => {\r\n    return state.profilePage.profile;\r\n}\r\n\r\nexport const selectProfilePhoto = (state: AppStateType) => {\r\n    return state.profilePage.profile?.photos.small;\r\n}\r\n\r\nexport const selectStatus = (state: AppStateType) => {\r\n    return state.profilePage.status;\r\n}\r\n\r\nexport const selectPostsData = (state: AppStateType) => {\r\n    return state.profilePage.postsData;\r\n}\r\n"],"names":["isOwner","globalStatus","useSelector","selectStatus","useState","editMode","setEditMode","status","setStatus","dispatch","useDispatch","useEffect","className","styles","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatusThunkCreator","reduxForm","form","handleSubmit","profile","error","setIsContacts","onSubmit","stylesInfo","style","createField","Input","stylesDataForm","type","Textarea","Object","keys","contacts","map","key","htmlType","onClick","float","UploadOutlined","props","ref","React","AntdIcon","_objectSpread","icon","UploadOutlinedSvg","displayName","EditOutlined","EditOutlinedSvg","ProfileData","goToEditMode","isContacts","params","useParams","history","useHistory","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","addNewDialogThunkCreator","userId","push","setMessagesWithUserThunkCreator","selectProfile","src","photos","small","userPhoto","name","target","files","length","savePhotoThunkCreator","initialValues","formData","saveProfileThunkCreator","Preloader","LikeOutlined","LikeOutlinedSvg","id","message","likesCount","isLiked","gutter","span","alt","actions","MyPosts","actualUserPhoto","setActualUserPhoto","selectProfilePhoto","postsData","selectPostsData","postsElements","post","AddNewPostFormRedux","values","newPostText","required","Profile","authorizedUserId","selectAuthorizedUserId","refreshProfile","match","getUserProfileThunkCreator","getStatusThunkCreator","console","withRouter","state","profilePage"],"sourceRoot":""}