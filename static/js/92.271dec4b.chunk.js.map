{"version":3,"file":"static/js/92.271dec4b.chunk.js","mappings":"iPAKIA,EAA6B,SAACC,GAC9B,MAAO,CACHC,OAAQD,EAAME,KAAKD,S,qDCN3B,EAA0B,yBAA1B,EAAkE,8BAAlE,EAAyG,wBAAzG,EAA0I,wBAA1I,EAA6K,0BCgB7K,EAR4C,SAACE,GACzC,OACI,gBAAKC,UAAWC,EAAiB,IAAMA,EAAvC,UACI,SAAC,KAAD,CAASC,GAAI,YAAcH,EAAMI,GAAjC,SAAsCJ,EAAMK,UCCxD,EANsC,SAACL,GACnC,OACI,gBAAKC,UAAWC,EAAhB,SAAiCF,EAAMM,WCsCzCC,GAAcC,EAAAA,EAAAA,GAAiB,IAgB/BC,GAAsBC,EAAAA,EAAAA,GAA+C,CAC3EC,KAAM,wBADsBD,EAXkE,SAACV,GAC3F,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,0BACKC,EAAAA,EAAAA,IAA0C,qBAAsB,iBAAkB,CAACC,EAAAA,EAAUR,GAAcS,EAAAA,OAEhH,0BAAK,6CASjB,EAjDsC,SAAChB,GACnC,IAAIiB,EAAUjB,EAAMkB,YAAYD,QAC5BE,EAAWnB,EAAMkB,YAAYC,SAE7BC,EAAkBH,EAAQI,KAAI,SAAAC,GAAM,OACpC,SAAC,EAAD,CAAYjB,KAAMiB,EAAOjB,KAAsBD,GAAIkB,EAAOlB,IAAtBkB,EAAOlB,OAG3CmB,EAAmBJ,EAASE,KAAI,SAAAf,GAAO,OACvC,SAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQF,OAOpD,OACI,iBAAKH,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKkB,KAEL,iBAAKnB,UAAWC,EAAhB,WACI,yBAAMqB,KACN,SAACd,EAAD,CAAqBG,SAXb,SAACY,GACjBxB,EAAMyB,YAAYD,EAAOE,0BCjBjC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAPkB,SAAC/B,GACnB,MAAO,CACHqB,YAAarB,EAAMqB,eAKE,CACrBO,YAAaI,EAAAA,EAAAA,sBLCd,SAA+DC,GAUlE,OAFqCF,EAAAA,EAAAA,IAA6EhC,EAA4B,GAAzGgC,EAP0B,SAAC5B,GAC5D,IAAKF,EAAwBE,EAAxBF,OAAWiC,GAAhB,OAA6B/B,EAA7B,GACA,OAAKF,GAEE,SAACgC,GAAD,UAAsBC,KADlB,SAAC,KAAD,CAAU5B,GAAG,gBKPhC,CASE6B","sources":["hoc/withAuthRedirect.tsx","webpack://react-training-1/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogItem.tsx","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["import { ComponentType, FC } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../Redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType):MapPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\n//HOC\r\nexport function withAuthRedirect<WrappedComponentType extends object>(WrappedComponent: ComponentType<WrappedComponentType>) {\r\n    const RedirectComponent:FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth)\r\n            return <Redirect to='/login' />\r\n        return <WrappedComponent {...restProps as WrappedComponentType}  />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WrappedComponentType, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Chnkj\",\"dialogsItems\":\"Dialogs_dialogsItems__z1e36\",\"active\":\"Dialogs_active__c-9aL\",\"dialog\":\"Dialogs_dialog__GyEkq\",\"messages\":\"Dialogs_messages__lqNfK\",\"message\":\"Dialogs_message__bEAwF\"};","import { FC } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './../Dialogs.module.css';\r\n\r\ntype DialogItemPropsType = {\r\n    id: number,\r\n    name: string\r\n}\r\n\r\nconst DialogItem: FC<DialogItemPropsType> = (props) => {\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import { FC } from 'react';\r\nimport classes from './../Dialogs.module.css';\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message: FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={classes.dialog}>{props.message}</div>\r\n    );\r\n}\r\n\r\nexport default Message;","import { FC } from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { InitialStateType } from '../../Redux/dialogs-reducer';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { createField, Textarea } from '../common/FormsControls/FormsControls';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport classes from './Dialogs.module.css';\r\nimport Message from './Message/Message';\r\n\r\nexport type DialogsPropsTypes = {\r\n    dialogsPage: InitialStateType,\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\ntype NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs:FC<DialogsPropsTypes> = (props) => {\r\n    let dialogs = props.dialogsPage.dialogs;\r\n    let messages = props.dialogsPage.messages;\r\n\r\n    let dialogsElements = dialogs.map(dialog =>\r\n        <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />\r\n    );\r\n\r\n    let messagesElements = messages.map(message =>\r\n        <Message message={message.message} key={message.id} />\r\n    );\r\n\r\n    let addNewMessage = (values:NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>;\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm:FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", \"newMessageBody\", [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div><button>Send</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormValuesType, PropsType>({\r\nform: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n","import { ComponentType } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { actions } from '../../Redux/dialogs-reducer';\r\nimport { AppStateType } from '../../Redux/redux-store';\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps, {\r\n        sendMessage: actions.sendMessageCreator\r\n        //...actions // Можно передавать callback и так,\r\n        // но в actions будут сидеть все AC (в данном случае\r\n        // только sendMessageCreator), следует это учитывать\r\n        // при дальнейшем пробросе данных и определении типов\r\n    }),\r\n    withAuthRedirect\r\n)(Dialogs);\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","props","className","classes","to","id","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","dialogs","dialogsPage","messages","dialogsElements","map","dialog","messagesElements","values","sendMessage","newMessageBody","compose","connect","actions","WrappedComponent","restProps","Dialogs"],"sourceRoot":""}