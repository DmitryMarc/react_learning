{"version":3,"file":"static/js/556.00bf1812.chunk.js","mappings":"6RACA,EAA6B,4BAA7B,EAAiE,uBCAjE,EAAuB,mB,SCmBvB,EAZgC,SAACA,GAC7B,OACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,IAAI,4FAA4FC,IAAI,WACvGJ,EAAMK,SACR,4BACI,mCADJ,IACwBL,EAAMM,kB,6BCQpCC,EAAgCC,EAAAA,MAAY,SAAAR,GAU9CS,QAAQC,IAAI,aAEZ,IACIC,EADYX,EAAMY,MACQC,KAAI,SAAAC,GAAI,OAClC,SAAC,EAAD,CAAoBT,QAASS,EAAKT,QAASC,WAAYQ,EAAKR,YAAjDQ,EAAKC,OASpB,OACI,iBAAKd,UAAWC,EAAhB,WACI,sCACA,SAACc,EAAD,CAAqBC,SAPb,SAACC,GACblB,EAAMmB,QAAQD,EAAOE,iBAOjB,gBAAKnB,UAAWC,EAAhB,SACKS,UA2BbK,GAAsBK,EAAAA,EAAAA,GAA0D,CAChFC,KAAM,yBADgBD,EAf6F,SAACrB,GACpH,OACI,kBAAMiB,SAAUjB,EAAMuB,aAAtB,WACI,0BACKC,EAAAA,EAAAA,IAAuC,eAAgB,cAAe,CAACC,EAAAA,GAAWC,EAAAA,OAIvF,0BACI,iDAUhB,IC1DA,GAHyBC,EAAAA,EAAAA,KAdD,SAACC,GACrB,MAAO,CACHhB,MAAOgB,EAAMC,YAAYC,cAIN,SAACC,GACxB,MAAO,CACHZ,QAAS,SAACC,GACNW,EAASC,EAAAA,GAAAA,qBAA6BZ,QAKzBO,CAC8BpB,G,oBCpBvD,EAAmC,sCAAnC,EAAqF,+BAArF,EAA8H,6B,UC8C9H,EAxC2D,SAACP,GAExD,OAA8BiC,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAASjC,EAAMoC,QAAzC,eAAKA,EAAL,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAUrC,EAAMoC,UACjB,CAACpC,EAAMoC,SAcV,OACI,4BACMF,IACE,4BACI,mCADJ,KACmB,iBAAMK,cAhBZ,WACrBJ,GAAY,IAee,SACVnC,EAAMoC,QAAU,aAG5BF,IACG,0BACI,kBAAOM,SAdA,SAACC,GACpBJ,EAAUI,EAAEC,cAAcC,QAcVC,WAAW,EAAMC,OApBV,WACvBV,GAAY,GACZnC,EAAM8C,aAAaV,IAmBHO,MAAOP,U,UCe/B,GAF6Bf,EAAAA,EAAAA,GAAiD,CAAEC,KAAM,gBAAzDD,EAvC7B,SAAC,GAAsC,IAApCE,EAAmC,EAAnCA,aAAcwB,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACtB,OACI,kBAAM/B,SAAUM,EAAhB,WACI,0BACI,mBAAQ0B,QAAS,aAAjB,oBAEHD,IAAS,gBAAK/C,UAAWiD,EAAAA,EAAAA,iBAAhB,SACLF,KAGL,4BACI,sCADJ,KACuBxB,EAAAA,EAAAA,IAA6B,YAAa,WAAY,GAAI2B,EAAAA,QAEjF,4BACI,+CACC3B,EAAAA,EAAAA,IAA6B,GAAI,iBAAkB,GAAI2B,EAAAA,GAAO,CAAEC,KAAM,iBAE3E,4BACI,oDACC5B,EAAAA,EAAAA,IAA6B,yBAA0B,4BAA6B,GAAIE,EAAAA,QAE7F,4BACI,sCACCF,EAAAA,EAAAA,IAA6B,WAAY,UAAW,GAAIE,EAAAA,QAE7D,4BACI,qCADJ,IACsB2B,OAAOC,KAAKP,EAAQQ,UAAU1C,KAAI,SAAA2C,GAChD,OACI,iBAAevD,UAAWC,EAA1B,WAEI,yBAAIsD,EAAJ,OAFJ,KAEmBhC,EAAAA,EAAAA,IAAYgC,EAAK,YAAcA,EAAK,GAAIL,EAAAA,MAFjDK,eCuB5BC,EAAuC,SAAC,GAAwC,IAAtCV,EAAqC,EAArCA,QAASW,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAC9D,OACI,2BACKD,IACG,0BACI,mBAAQT,QAASU,EAAjB,qBAGR,4BACI,sCADJ,IACuBZ,EAAQa,aAE/B,4BACI,8CADJ,IAC+Bb,EAAQc,eAAiB,MAAQ,QAE/Dd,EAAQc,iBACL,4BACI,mDADJ,IACoCd,EAAQe,8BAGhD,4BACI,qCADJ,IACsBf,EAAQgB,YAE9B,4BACI,qCADJ,IACsBV,OAAOC,KAAKP,EAAQQ,UAAU1C,KAAI,SAAA2C,GAChD,OAAO,SAACQ,EAAD,CAASC,aAAcT,EAAKU,aAAcnB,EAAQQ,SAASC,eAYhFQ,EAA0B,SAAC,GAAoC,IAAlCC,EAAiC,EAAjCA,aAAcC,EAAmB,EAAnBA,aAC7C,OAAO,iBAAKjE,UAAWC,EAAhB,WAAiC,yBAAI+D,EAAJ,OAAjC,IAAyDC,MAGpE,EAxF6C,SAAC,GAAwE,IAAtEnB,EAAqE,EAArEA,QAASX,EAA4D,EAA5DA,OAAQU,EAAoD,EAApDA,aAAcY,EAAsC,EAAtCA,QAASS,EAA6B,EAA7BA,UAAWC,EAAkB,EAAlBA,YAE/F,GAA8BnC,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KAEA,IAAKY,EACD,OAAO,SAACsB,EAAA,EAAD,IAgBX,OACI,0BACI,0BACI,iBAAKpE,UAAWC,EAAhB,WACI,gBAAKC,IAAK4C,EAAQuB,OAAOC,OAASC,EAC9BvE,UAAWC,IACdwD,IAAW,kBAAON,KAAM,OAAQZ,SAnBrB,SAACC,GAAqC,IAAD,EAC7D,UAAIA,EAAEgC,OAAOC,aAAb,OAAI,EAAgBC,QAChBR,EAAU1B,EAAEgC,OAAOC,MAAM,OAmBhBxC,GACK,SAAC,EAAD,CAAiB0C,cAAe7B,EAASA,QAASA,EAAS9B,SAjBhE,SAAC4D,GAEdT,EAAYS,GAAUC,MAAK,WAEvB3C,GAAY,UAcE,SAACsB,EAAD,CAAaV,QAASA,EAASW,QAASA,EAASC,aAAc,WAAQxB,GAAY,OAGzF,SAAC,EAAD,CAAwBC,OAAQA,EAC5BU,aAAcA,YCzBtC,EAb8B,SAAC9C,GAC3B,OACI,4BACI,SAAC,EAAD,CAAamE,UAAWnE,EAAMmE,UAC1BT,QAAS1D,EAAM0D,QACfX,QAAS/C,EAAM+C,QAASX,OAAQpC,EAAMoC,OACtCgC,YAAapE,EAAMoE,YACnBtB,aAAc9C,EAAM8C,gBACxB,SAAC,EAAD,Q,oBCSCiC,EAAgC,SAAC/E,GAC1C,IAAM+C,GAAUiC,EAAAA,EAAAA,KAAY,SAACpD,GAAD,OAAwBA,EAAMC,YAAYkB,WAChEX,GAAS4C,EAAAA,EAAAA,KAAY,SAACpD,GAAD,OAAwBA,EAAMC,YAAYO,UAC/D6C,GAAmBD,EAAAA,EAAAA,KAAY,SAACpD,GAAD,OAAwBA,EAAMsD,KAAKC,UAGlEpD,GAA2BqD,EAAAA,EAAAA,MAE3BC,EAAiB,WACnB,IAAIF,GAAyBnF,EAAMsF,MAAMC,OAAOJ,OAC3CA,IACDA,EAASF,IAILjF,EAAMwF,QAAQC,KAAK,UAGtBN,GAIDpD,GAAS2D,EAAAA,EAAAA,IAA2BP,IACpCpD,GAAS4D,EAAAA,EAAAA,IAAsBR,KAJ/B1E,QAAQuC,MAAM,oEAiBtB,OAVAV,EAAAA,EAAAA,YAAU,WACN+C,MACD,KAEH/C,EAAAA,EAAAA,YAAU,WACFtC,EAAMsF,MAAMC,OAAOJ,QAAUnF,EAAMsF,MAAMC,OAAOJ,QAChDE,MAEL,CAACrF,KAGA,SAAC,GAAD,kBAAaA,GAAb,IAAoB0D,SAAU1D,EAAMsF,MAAMC,OAAOJ,SAAWF,EAC5DlC,QAASA,EAASX,OAAQA,EAAQU,aAAc8C,EAAAA,GAChDzB,UAAW0B,EAAAA,OAIbC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WA0CD,OA1CCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WACI,IAAIX,GAAyBY,KAAK/F,MAAMsF,MAAMC,OAAOJ,OAChDA,IACDA,EAASY,KAAK/F,MAAMiF,mBAIhBc,KAAK/F,MAAMwF,QAAQC,KAAK,UAI3BN,GAIDY,KAAK/F,MAAMgG,eAAeb,GAC1BY,KAAK/F,MAAMiG,UAAUd,IAJrB1E,QAAQuC,MAAM,qEAMrB,+BAED,WACI+C,KAAKV,mBACR,gCAED,SAAmBa,GACXH,KAAK/F,MAAMsF,MAAMC,OAAOJ,QAAUe,EAAUZ,MAAMC,OAAOJ,QACzDY,KAAKV,mBAEZ,kCAED,cAEC,oBAED,WACI,OACI,SAAC,GAAD,kBAAaU,KAAK/F,OAAlB,IAAyB0D,SAAUqC,KAAK/F,MAAMsF,MAAMC,OAAOJ,SAAWY,KAAK/F,MAAMiF,iBACjFlC,QAASgD,KAAK/F,MAAM+C,QAASX,OAAQ2D,KAAK/F,MAAMoC,OAAQU,aAAciD,KAAK/F,MAAM8C,aACjFqB,UAAW4B,KAAK/F,MAAMmE,iBAE7B,EA1CC2B,CAAyBK,EAAAA,WAsD/B,GAAeC,EAAAA,EAAAA,KACXzE,EAAAA,EAAAA,KAVkB,SAACC,GACnB,MAAO,CACHmB,QAASnB,EAAMC,YAAYkB,QAC3BX,OAAQR,EAAMC,YAAYO,OAC1B6C,iBAAkBrD,EAAMsD,KAAKC,OAC7BkB,OAAQzE,EAAMsD,KAAKmB,UAMnB,CACIL,eAAgBN,EAAAA,GAChBO,UAAWN,EAAAA,GACX7C,aAAc8C,EAAAA,GACdzB,UAAW0B,EAAAA,GACXzB,YAAakC,EAAAA,KAErBC,EAAAA,GATJ,CAUET","sources":["webpack://react-training-1/./src/Components/Profile/MyPosts/MyPosts.module.css?bd90","webpack://react-training-1/./src/Components/Profile/MyPosts/Post/Post.module.css?54ab","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","webpack://react-training-1/./src/Components/Profile/ProfileInfo/ProfileInfo.module.css?23b5","Components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","Components/Profile/ProfileInfo/ProfileDataForm.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__9cSVL\",\"posts\":\"MyPosts_posts__TPsYA\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__+5aXk\"};","import { FC } from 'react';\r\nimport classes from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n    message: string,\r\n    likesCount: number\r\n}\r\n\r\nconst Post: FC<PostPropsType> = (props) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img src=\"https://i.pinimg.com/736x/38/07/45/3807452de810352bca9c0587863ebece--avatar-film-nerd.jpg\" alt=\"avatar\" />\r\n            { props.message }\r\n            <div>\r\n                <span>like</span> { props.likesCount }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post;","import classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport React, { FC } from 'react';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLengthCreator, required } from '../../../utils/validators/validators';\r\nimport { createField, GetStringKeysType, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport { PostType } from '../../../types/types';\r\n\r\ntype AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\nexport type MapStatePropsType = {\r\n    posts: Array<PostType>\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\ntype MyPostsPropsType = MapStatePropsType & MapDispatchPropsType;\r\n\r\nconst MyPosts: FC<MyPostsPropsType> = React.memo( props => {\r\n    // componentDidMount(){\r\n    //     setTimeout(() => {\r\n    //         this.setState({a:12})\r\n    //     }, 3000)\r\n    // }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState){\r\n    //     return nextProps != this.props || nextState != this.state;\r\n    // }\r\n    console.log(\"RENDER YO\");\r\n\r\n    let postsData = props.posts;\r\n    let postsElements = postsData.map(post =>\r\n        <Post key={post.id} message={post.message} likesCount={post.likesCount} />\r\n    );\r\n    // уже не используем походу\r\n    // let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostFormRedux onSubmit={onAddPost} />\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n});\r\n\r\n// const maxLengt10 = maxLengthCreator(10);\r\n\r\ntype AddPostFormValuesTypeKeys = GetStringKeysType<AddPostFormValuesType>;\r\n\r\ntype AddNewPostFormPropsType = {}\r\n\r\nlet AddNewPostForm: FC<InjectedFormProps<AddPostFormValuesType & AddNewPostFormPropsType> & AddNewPostFormPropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<AddPostFormValuesTypeKeys>(\"Post message\", \"newPostText\", [required], Textarea)}\r\n                {/* <Field component={Textarea} placeholder={\"Post message\"} \r\n                name=\"newPostText\" validate={[required, maxLengt10]} /> */}\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm<AddPostFormValuesType, AddNewPostFormPropsType>({\r\n    form: \"ProfileAddNewPostForm\"\r\n})(AddNewPostForm);\r\n\r\nexport default MyPosts;\r\n\r\n\r\n\r\n\r\n","import { Dispatch } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { actions, ActionsTypes } from '../../../Redux/profile-reducer';\r\nimport { AppStateType } from '../../../Redux/redux-store';\r\nimport MyPosts, { MapStatePropsType, MapDispatchPropsType } from './MyPosts';\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.postsData\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: Dispatch<ActionsTypes>):MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPostText: string) => {\r\n            dispatch(actions.addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect<MapStatePropsType, MapDispatchPropsType, \r\n{}, AppStateType>(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Inoui\",\"mainPhoto\":\"ProfileInfo_mainPhoto__C+0Qe\",\"contact\":\"ProfileInfo_contact__gQ6n5\"};","import { useState, useEffect, FC, ChangeEvent } from 'react';\r\n\r\ntype ProfileStatusPropsType = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileStatusWithHooks: FC<ProfileStatusPropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status);\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status);\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value);\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <b>Status:</b> <span onDoubleClick={activateEditMode}>\r\n                        {props.status || \"-----\"}</span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange}\r\n                        autoFocus={true} onBlur={deactivateEditMode}\r\n                        value={status}></input>\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import classes from './ProfileInfo.module.css';\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\";\r\nimport { InjectedFormProps, reduxForm } from \"redux-form\";\r\nimport { createField, GetStringKeysType, Input, Textarea } from \"../../common/FormsControls/FormsControls\";\r\nimport { FC } from 'react';\r\nimport { ProfileType } from '../../../types/types';\r\n\r\ntype ProfileDataFormPropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeysType<ProfileType>;\r\n\r\nconst ProfileDataForm: FC<InjectedFormProps<ProfileType, ProfileDataFormPropsType> & ProfileDataFormPropsType> = \r\n({ handleSubmit, profile, error }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button onClick={() => { }}>save</button>\r\n            </div>\r\n            {error && <div className={style.formSummaryError}>\r\n                {error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <b>Full name:</b> {createField<ProfileTypeKeys>(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b>\r\n                {createField<ProfileTypeKeys>(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n            </div>\r\n            <div>\r\n                <b>My professional skills:</b>\r\n                {createField<ProfileTypeKeys>(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About me:</b>\r\n                {createField<ProfileTypeKeys>(\"About me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return (\r\n                        <div key={key} className={classes.contact}>\r\n                            {/* todo: create some solution for embedded objects */}\r\n                            <b>{key}:</b> {createField(key, \"contacts.\" + key, [], Input)}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataReduxForm = reduxForm<ProfileType, ProfileDataFormPropsType>({ form: 'edit-profile' })(ProfileDataForm);\r\n\r\nexport default ProfileDataReduxForm;","import Preloader from '../../common/Preloader/Preloader';\r\nimport classes from './ProfileInfo.module.css';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\nimport { ChangeEvent, FC, useState } from 'react';\r\nimport ProfileDataForm from './ProfileDataForm';\r\nimport { ContactsType, ProfileType } from '../../../types/types';\r\n\r\ntype ProfileInfoPropsType = { \r\n    profile: ProfileType | null,\r\n    status: string, \r\n    isOwner: boolean, \r\n    updateStatus: (status:string) => void, \r\n    savePhoto: (file:File) => void, \r\n    saveProfile: (profile: ProfileType) => Promise<any> \r\n}\r\n\r\nconst ProfileInfo:FC<ProfileInfoPropsType> = ({ profile, status, updateStatus, isOwner, savePhoto, saveProfile }) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    const onMainPhotoSelected = (e:ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0]);\r\n        }\r\n    }\r\n    const onSubmit = (formData: ProfileType) => {\r\n        // todo: remove then\r\n        saveProfile(formData).then(() => { \r\n        //ждём из промиса (promise.then(...))\r\n            setEditMode(false);\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div className={classes.descriptionBlock}>\r\n                    <img src={profile.photos.small || userPhoto}\r\n                        className={classes.mainPhoto} />\r\n                    {isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n\r\n                    {editMode\r\n                        ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit} />\r\n                        : <ProfileData profile={profile} isOwner={isOwner} goToEditMode={() => { setEditMode(true) }} />\r\n                    }\r\n\r\n                    <ProfileStatusWithHooks status={status}\r\n                        updateStatus={updateStatus} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType, \r\n    isOwner: boolean, \r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData:FC<ProfileDataPropsType> = ({ profile, isOwner, goToEditMode }) => {\r\n    return (\r\n        <div>\r\n            {isOwner &&\r\n                <div>\r\n                    <button onClick={goToEditMode}>edit</button>\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>Full name:</b> {profile.fullName}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b> {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob &&\r\n                <div>\r\n                    <b>My professional skills:</b> {profile.lookingForAJobDescription}\r\n                </div>\r\n            }\r\n            <div>\r\n                <b>About me:</b> {profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <Contact contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]} />\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactType = {\r\n    contactTitle: string, \r\n    contactValue: string\r\n}\r\n\r\nconst Contact:FC<ContactType> = ({ contactTitle, contactValue }) => {\r\n    return <div className={classes.contact}><b>{contactTitle}:</b> {contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;\r\n\r\n\r\n\r\n","import { FC } from 'react';\r\nimport { ProfileType } from '../../types/types';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null,\r\n    status: string, \r\n    isOwner: boolean, \r\n    updateStatus: (status:string) => void, \r\n    savePhoto: (file:File) => void, \r\n    saveProfile: (profile: ProfileType) => Promise<any> \r\n}\r\n\r\nconst Profile:FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo savePhoto={props.savePhoto}\r\n                isOwner={props.isOwner}\r\n                profile={props.profile} status={props.status} \r\n                saveProfile={props.saveProfile}\r\n                updateStatus={props.updateStatus} />\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n\r\n\r\n\r\n","import { Component, ComponentType, FC, useEffect } from 'react';\r\nimport { connect, useDispatch, useSelector } from 'react-redux';\r\nimport Profile from './Profile';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\nimport {\r\n    getStatusThunkCreator, \r\n    getUserProfileThunkCreator,\r\n    savePhotoThunkCreator,\r\n    saveProfileThunkCreator,\r\n    updateStatusThunkCreator\r\n} from '../../Redux/profile-reducer';\r\nimport { compose } from 'redux';\r\nimport { AppDispatchType, AppStateType } from '../../Redux/redux-store';\r\nimport { ProfileType } from '../../types/types';\r\n\r\ntype MapStatePropsType = ReturnType<typeof mapStateToProps>;\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId:number) => void,\r\n    getStatus: (userId:number) => void,\r\n    updateStatus: (status: string) => void,\r\n    savePhoto: (file:File) => void,\r\n    saveProfile: (profile:ProfileType) => Promise<any> \r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nexport const ProfileWrapper: FC<PropsType> = (props) => {\r\n    const profile = useSelector((state:AppStateType) => state.profilePage.profile);\r\n    const status = useSelector((state:AppStateType) => state.profilePage.status);\r\n    const authorizedUserId = useSelector((state:AppStateType) => state.auth.userId);\r\n    //const isAuth = useSelector((state:AppStateType) => state.auth.isAuth);\r\n\r\n    const dispatch:AppDispatchType = useDispatch();\r\n\r\n    const refreshProfile = () => {\r\n        let userId: number | null = +props.match.params.userId;\r\n        if (!userId) {\r\n            userId = authorizedUserId; //Мой профиль!!!\r\n            if (!userId) {\r\n                //todo: maybe replace push with Redirect???\r\n                //редирект на логин, если нет id юзера (мой id)\r\n                props.history.push(\"/login\");\r\n            }\r\n        }\r\n        if (!userId) {\r\n            console.error(\"Id should exists in URL params or in state ('authorizedUserId')\");\r\n        }\r\n        else {\r\n            dispatch(getUserProfileThunkCreator(userId));\r\n            dispatch(getStatusThunkCreator(userId));\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        refreshProfile();\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (props.match.params.userId != props.match.params.userId) {\r\n            refreshProfile();\r\n        }\r\n    }, [props])\r\n    \r\n    return (\r\n        <Profile {...props} isOwner={+props.match.params.userId === authorizedUserId} \r\n        profile={profile} status={status} updateStatus={updateStatusThunkCreator} \r\n        savePhoto={savePhotoThunkCreator} />\r\n    );\r\n}\r\n\r\nclass ProfileContainer extends Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId; //Мой профиль!!!\r\n            if (!userId) {\r\n                //todo: maybe replace push with Redirect???\r\n                //редирект на логин, если нет id юзера (мой id)\r\n                this.props.history.push(\"/login\");\r\n            }\r\n        }\r\n\r\n        if (!userId) {\r\n            console.error(\"Id should exists in URL params or in state ('authorizedUserId')\");\r\n        }\r\n        else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps:PropsType) {\r\n        if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        // Почитать про этот жизненный цикл\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} isOwner={+this.props.match.params.userId === this.props.authorizedUserId} \r\n            profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus} \r\n            savePhoto={this.props.savePhoto} />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state:AppStateType) => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToProps,\r\n        {\r\n            getUserProfile: getUserProfileThunkCreator,\r\n            getStatus: getStatusThunkCreator,\r\n            updateStatus: updateStatusThunkCreator,\r\n            savePhoto: savePhotoThunkCreator,\r\n            saveProfile: saveProfileThunkCreator\r\n        }),\r\n    withRouter\r\n)(ProfileContainer);\r\n\r\n\r\n\r\n\r\n"],"names":["props","className","classes","src","alt","message","likesCount","MyPosts","React","console","log","postsElements","posts","map","post","id","AddNewPostFormRedux","onSubmit","values","addPost","newPostText","reduxForm","form","handleSubmit","createField","required","Textarea","connect","state","profilePage","postsData","dispatch","actions","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","profile","error","onClick","style","Input","type","Object","keys","contacts","key","ProfileData","isOwner","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","savePhoto","saveProfile","Preloader","photos","small","userPhoto","target","files","length","initialValues","formData","then","ProfileWrapper","useSelector","authorizedUserId","auth","userId","useDispatch","refreshProfile","match","params","history","push","getUserProfileThunkCreator","getStatusThunkCreator","updateStatusThunkCreator","savePhotoThunkCreator","ProfileContainer","this","getUserProfile","getStatus","prevProps","Component","compose","isAuth","saveProfileThunkCreator","withRouter"],"sourceRoot":""}