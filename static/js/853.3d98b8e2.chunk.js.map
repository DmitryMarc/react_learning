{"version":3,"file":"static/js/853.3d98b8e2.chunk.js","mappings":"wMAEaA,EAAiB,SAACC,GAC3B,OAAOA,EAAMC,KAAKC,QAGTC,EAAqB,SAACH,GAC/B,OAAOA,EAAMC,KAAKG,U,gGCITC,EAAe,WACxB,IAAMD,GAAWE,EAAAA,EAAAA,IAAYH,GACvBI,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAmBA,OAPAC,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdF,IAEA,UAAAH,EAAkBM,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAE3D,CAACX,IAECA,GAID,iBAAKY,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SArBlC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,WAAaL,EAAQM,aAAe,KAC3EjB,GAAgBC,GAAgB,GAGjCD,GAAgBC,GAAgB,IAepC,UACKP,EAASwB,KAAI,SAACC,EAASC,GAAV,OAAoB,SAACC,EAAD,CAA0BF,QAASA,GAArBA,EAAQG,QACxD,gBAAKC,IAAK1B,QALP,SAAC2B,EAAA,EAAD,KAUTH,GAA+CI,EAAAA,EAAAA,OAAK,YAAkB,IAAfN,EAAc,EAAdA,QACnDO,GAAUC,EAAAA,EAAAA,MAIhB,OACI,4BACI,SAAC,IAAD,KACA,cAAGC,QANY,WACnBF,EAAQG,KAAR,mBAAyBV,EAAQW,UAK7B,UAA4B,gBAAKC,IAAKZ,EAAQa,MAAOC,MAAM,YAC3D,uBAAId,EAAQe,YACZ,mBACA,uBAAIf,EAAQA,gBAKXgB,EAAqB,WAC9B,OAA8BpC,EAAAA,EAAAA,UAAS,IAAvC,eAAOoB,EAAP,KAAgBiB,EAAhB,KACMC,GAA4BC,EAAAA,EAAAA,MAC5B9C,GAASI,EAAAA,EAAAA,IAAYP,GASnBkD,EAAaC,EAAAA,EAAAA,SAErB,OACI,4BACI,UAAC,IAAD,CAAKlC,MAAO,CAAEmC,OAAQ,cAAtB,WACI,SAAC,IAAD,CAAKC,KAAM,EAAX,UACI,0BAGI,SAAC,IAAD,CACIpC,MAAO,CAAE2B,MAAO,QAChBU,MAAOxB,EAFX,UAII,SAACoB,EAAD,CACIK,YAAY,aACZC,UAAU,SACVvC,MAAO,CAAEC,OAAQ,IACjBuC,SAAU,SAACpC,GAAD,OAAO0B,EAAW1B,EAAEE,cAAc+B,QAC5CI,YAAU,WAK1B,SAAC,IAAD,CAAKL,KAAM,SAEf,UAAC,IAAD,CAAKpC,MAAO,CAAEmC,OAAQ,aAAtB,WACI,SAAC,IAAD,CAAKC,KAAM,EAAX,UACI,0BAGI,SAAC,IAAD,CAAQM,SAAqB,UAAXxD,EACdoC,QAtCG,WAClBT,IAGLkB,GAASY,EAAAA,EAAAA,IAAc9B,IACvBiB,EAAW,MAiCsC9B,MAAO,CAAE4C,MAAO,SADjD,uBAIR,SAAC,IAAD,CAAKR,KAAM,YC1FrBS,EAAW,WACb,IAAMd,GAA4BC,EAAAA,EAAAA,MAC5B9C,GAASI,EAAAA,EAAAA,IAAYP,GAS3B,OAPAa,EAAAA,EAAAA,YAAU,WAEN,OADAmC,GAASe,EAAAA,EAAAA,OACF,WACHf,GAASgB,EAAAA,EAAAA,UAEd,KAGC,2BACgB,UAAX7D,IAAsB,0EACvB,iCACI,SAACG,EAAD,KACA,SAACwC,EAAD,WAMhB,EA9BqB,WACjB,OACI,0BACI,SAACgB,EAAD","sources":["Redux/selectors/chat-selectors.ts","pages/Chat/Chat.tsx","pages/ChatPage.tsx"],"sourcesContent":["import { AppStateType } from \"../redux-store\";\r\n\r\nexport const selectStatusWS = (state: AppStateType) => {\r\n    return state.chat.status;\r\n}\r\n\r\nexport const selectChatMessages = (state: AppStateType) => {\r\n    return state.chat.messages;\r\n}\r\n","import { FC, memo, useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ChatMessageAPIType } from \"../../api/chat-api\";\r\nimport { sendMessageTC } from \"../../Redux/chat-reducer\";\r\nimport { AppDispatchType } from \"../../Redux/redux-store\";\r\nimport { selectChatMessages, selectStatusWS } from \"../../Redux/selectors/chat-selectors\";\r\nimport { AutoComplete, Input, Button, Row, Col, Divider } from 'antd';\r\nimport { selectAuthorizedUserId, selectIsAuth } from \"../../Redux/selectors/auth-selectors\";\r\nimport { Redirect, useHistory } from \"react-router-dom\";\r\nimport Preloader from \"../../Components/common/Preloader/Preloader\";\r\n\r\nexport const Messages: FC = () => {\r\n    const messages = useSelector(selectChatMessages);\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true);\r\n        }\r\n        else {\r\n            isAutoScroll && setIsAutoScroll(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            // Скроллинг при изменении сообщений\r\n            messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n    }, [messages])\r\n\r\n    if (!messages) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div style={{ height: '600px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n            {messages.map((message, index) => <Message key={message.id} message={message} />)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: FC<{ message: ChatMessageAPIType }> = memo(({ message }) => {\r\n    const history = useHistory();\r\n    const onClickHandler = () => {\r\n        history.push(`/profile/${message.userId}`)\r\n    }\r\n    return (\r\n        <div>\r\n            <Divider />\r\n            <a onClick={onClickHandler}><img src={message.photo} width=\"50px\" /></a>\r\n            <b>{message.userName}</b>\r\n            <br />\r\n            <p>{message.message}</p>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const AddMessageForm: FC = () => {\r\n    const [message, setMessage] = useState('');\r\n    const dispatch: AppDispatchType = useDispatch();\r\n    const status = useSelector(selectStatusWS);\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessageTC(message));\r\n        setMessage('');\r\n    }\r\n    const { TextArea } = Input;\r\n    \r\n    return (\r\n        <div>\r\n            <Row style={{ margin: \"10px 0 0 0\" }}>\r\n                <Col span={6}>\r\n                    <div>\r\n                        {/* <textarea onChange={(e) => setMessage(e.currentTarget.value)}\r\n                    value={message}></textarea> */}\r\n                        <AutoComplete\r\n                            style={{ width: \"100%\" }}\r\n                            value={message}\r\n                        >\r\n                            <TextArea\r\n                                placeholder=\"input here\"\r\n                                className=\"custom\"\r\n                                style={{ height: 70 }}\r\n                                onChange={(e) => setMessage(e.currentTarget.value)}\r\n                                allowClear\r\n                            />\r\n                        </AutoComplete>\r\n                    </div>\r\n                </Col>\r\n                <Col span={18}></Col>\r\n            </Row>\r\n            <Row style={{ margin: \"5px 0 0 0\" }}>\r\n                <Col span={6}>\r\n                    <div>\r\n                        {/* <button disabled={status !== 'ready'}\r\n                    onClick={sendMessageHandler}>Send</button> */}\r\n                        <Button disabled={status !== 'ready'}\r\n                            onClick={sendMessageHandler} style={{ float: \"right\" }}>Send</Button>\r\n                    </div>\r\n                </Col>\r\n                <Col span={18}></Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}","import { FC, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { startMessagesListeningTC, stopMessagesListeningTC\r\n} from \"../Redux/chat-reducer\";\r\nimport { AppDispatchType } from \"../Redux/redux-store\";\r\nimport { selectStatusWS } from \"../Redux/selectors/chat-selectors\";\r\nimport { AddMessageForm, Messages } from \"./Chat/Chat\";\r\n\r\nconst ChatPage: FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat: FC = () => {\r\n    const dispatch: AppDispatchType = useDispatch();\r\n    const status = useSelector(selectStatusWS);\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListeningTC());\r\n        return () => {\r\n            dispatch(stopMessagesListeningTC());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {status === \"error\" && <div>Some error occured. Please refresh the page</div>}\r\n            <>\r\n                <Messages />\r\n                <AddMessageForm />\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage;"],"names":["selectStatusWS","state","chat","status","selectChatMessages","messages","Messages","useSelector","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","message","index","Message","id","ref","Preloader","memo","history","useHistory","onClick","push","userId","src","photo","width","userName","AddMessageForm","setMessage","dispatch","useDispatch","TextArea","Input","margin","span","value","placeholder","className","onChange","allowClear","disabled","sendMessageTC","float","Chat","startMessagesListeningTC","stopMessagesListeningTC"],"sourceRoot":""}