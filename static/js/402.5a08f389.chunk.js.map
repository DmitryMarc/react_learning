{"version":3,"file":"static/js/402.5a08f389.chunk.js","mappings":"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","sources":["webpack://react-training-1/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/DialogItem/DialogItem.tsx","hoc/withAuthRedirect.tsx","Redux/selectors/dialogs-selectors.ts","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Message/Messages.tsx","Components/Dialogs/Dialogs.tsx","Redux/selectors/profile-selectors.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Chnkj\",\"dialogsItemsWrapper\":\"Dialogs_dialogsItemsWrapper__Coa82\",\"dialogsItems\":\"Dialogs_dialogsItems__z1e36\",\"active\":\"Dialogs_active__c-9aL\",\"dialog\":\"Dialogs_dialog__GyEkq\",\"messagesWrapper\":\"Dialogs_messagesWrapper__+3yyH\",\"messages\":\"Dialogs_messages__lqNfK\",\"message\":\"Dialogs_message__bEAwF\",\"messageInformation\":\"Dialogs_messageInformation__hZFJt\",\"sanderName\":\"Dialogs_sanderName__JzyA2\",\"messageBody\":\"Dialogs_messageBody__3jr4x\",\"messageBodyOfSender\":\"Dialogs_messageBodyOfSender__fHEwo\"};","import { FC } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { setMessagesWithUserThunkCreator } from '../../../Redux/dialogs-reducer';\r\nimport { AppDispatchType } from '../../../Redux/redux-store';\r\nimport styles from './../Dialogs.module.css';\r\nimport userPhoto from '../../../../src/assets/images/user.png';\r\n\r\ntype DialogItemPropsType = {\r\n    id: number,\r\n    name: string,\r\n    photo: string | null\r\n}\r\n\r\nconst DialogItem: FC<DialogItemPropsType> = (props) => {\r\n    const dispatch: AppDispatchType = useDispatch();\r\n    const onClickHandler = () => {\r\n        dispatch(setMessagesWithUserThunkCreator(props.id));\r\n    }\r\n    return (\r\n        <div className={styles.dialog + ' ' + styles.active}>\r\n            <NavLink onClick={onClickHandler} to={'/dialogs/' + props.id + '/messages'}>\r\n                <div>\r\n                    {props.photo\r\n                        ? <img src={props.photo} alt='userPhoto' style={{ width: '35px', borderRadius:'50%'}}></img>\r\n                        : <img src={userPhoto} alt='userPhoto' width='35px'></img>\r\n                    } \r\n                    <span> {props.name}</span>\r\n                </div>\r\n            </NavLink>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default DialogItem;","import { ComponentType, FC } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { AppStateType } from \"../Redux/redux-store\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType):MapPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {}\r\n\r\n//HOC\r\nexport function withAuthRedirect<WrappedComponentType extends object>(WrappedComponent: ComponentType<WrappedComponentType>) {\r\n    const RedirectComponent:FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props;\r\n        if (!isAuth)\r\n            return <Redirect to='/login' />\r\n        return <WrappedComponent {...restProps as WrappedComponentType}  />\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WrappedComponentType, AppStateType>(mapStateToPropsForRedirect, {})(RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}","import { AppStateType } from \"../redux-store\";\r\n\r\nexport const selectDialogsPage = (state: AppStateType) => {\r\n    return state.dialogsPage;\r\n}\r\n","import { FC, useEffect } from 'react';\r\nimport { DialogType } from '../../../Redux/dialogs-reducer';\r\nimport { getUserProfileThunkCreator } from '../../../Redux/profile-reducer';\r\nimport styles from './../Dialogs.module.css';\r\nimport userPhoto from '../../../../src/assets/images/user.png'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectAuthorizedUserId } from '../../../Redux/selectors/auth-selectors';\r\nimport { selectProfilePhoto } from '../../../Redux/selectors/profile-selectors'\r\nimport { AppDispatchType } from '../../../Redux/redux-store';\r\n\r\ntype MessageType = {\r\n    message: {\r\n        body: string,\r\n        senderId?: number,\r\n        senderName?: string,\r\n        recipientId?: number,\r\n    }\r\n}\r\ntype RecipientPhotoType = {\r\n    dialogPhoto?: DialogType['photos'];\r\n};\r\ntype AuthorizedUserIdType = {\r\n    authorizedUserId: number | null\r\n}\r\n\r\ntype MessagePropsType = MessageType & RecipientPhotoType & AuthorizedUserIdType;\r\n\r\nconst Message: FC<MessagePropsType> = ({authorizedUserId, message, dialogPhoto}) => { \r\n    const profilePhoto = useSelector(selectProfilePhoto);\r\n\r\n    return (\r\n        <div className={styles.message}> \r\n        <div className={`${authorizedUserId === message.senderId && styles.messageInformation}`}>\r\n            { dialogPhoto?.small && authorizedUserId !== message.senderId\r\n                ? <img style={{width:'30px', borderRadius: '50%'}} src={dialogPhoto?.small} alt='userPhoto' />\r\n                : authorizedUserId === message.senderId\r\n                ? <img style={{width:'30px', borderRadius: '50%'}} src={profilePhoto as string | undefined} alt='userPhoto' />\r\n                : <img style={{width:'30px', borderRadius: '50%'}} src={userPhoto} alt='userPhoto' />\r\n            } \r\n            <span className={styles.sanderName}>{message.senderName}</span>\r\n            </div>\r\n            <div className={`${authorizedUserId === message.senderId ? styles.messageBodyOfSender : styles.messageBody}`}>{message.body}</div>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Message;","import { FC, useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useParams } from 'react-router-dom';\r\nimport { reset } from 'redux-form';\r\nimport { InitialStateType, sendMessageThunkCreator, setMessagesWithUserThunkCreator } from '../../../Redux/dialogs-reducer';\r\nimport { getUserProfileThunkCreator } from '../../../Redux/profile-reducer';\r\nimport { AppDispatchType } from '../../../Redux/redux-store';\r\nimport { selectAuthorizedUserId } from '../../../Redux/selectors/auth-selectors';\r\nimport { selectProfilePhoto } from '../../../Redux/selectors/profile-selectors';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport { AddMessageFormRedux } from '../Dialogs';\r\nimport styles from './../Dialogs.module.css';\r\nimport Message from './Message';\r\n\r\n// type MessagesPropsType =  Pick<InitialStateType, \"messages\">;\r\ntype DialogsType = Pick<InitialStateType, \"dialogs\">['dialogs'];\r\n\r\ntype ParamsType = { userId: string };\r\n\r\ntype NewMessageFormValuesType = {\r\n    newMessageBody: string,\r\n}\r\n\r\nconst getCurrentDialog = (dialogs: DialogsType, params: ParamsType) => {\r\n    for (let i = 0; i < dialogs.length; i++) {\r\n        const currentDialog = dialogs[i];\r\n        for (let key in currentDialog) {\r\n            if (\"id\" === key && currentDialog[key].toString() === params.userId) {\r\n                return currentDialog;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nconst Messages: FC<InitialStateType> = (props) => {\r\n    const { dialogs, messages } = props;\r\n    const dispatch: AppDispatchType = useDispatch();\r\n    const authorizedUserId = useSelector(selectAuthorizedUserId);\r\n    const params: ParamsType = useParams();\r\n\r\n    let currentDialog = getCurrentDialog(dialogs, params);\r\n\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true);\r\n        }\r\n        else {\r\n            isAutoScroll && setIsAutoScroll(false);\r\n        }\r\n    }\r\n    \r\n    useEffect(() => {\r\n        // Чтобы не было бага c формой отправки сообщения после перезагрузки страницы\r\n        dispatch(setMessagesWithUserThunkCreator(+params.userId));\r\n        \r\n        if (authorizedUserId){\r\n            dispatch(getUserProfileThunkCreator(authorizedUserId));\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            // Скроллинг при изменении сообщений\r\n            messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n    }, [messages])\r\n\r\n    let messagesElements = messages.map(message =>\r\n        <Message authorizedUserId={authorizedUserId} dialogPhoto={currentDialog?.photos} message={message} key={message.id} />\r\n    );\r\n    let addNewMessage = async (values: NewMessageFormValuesType) => {\r\n        dispatch(sendMessageThunkCreator(+params.userId, values.newMessageBody));\r\n        dispatch(reset('dialogAddMessageForm'));\r\n    }\r\n\r\n    if(!messages){\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <>\r\n            <div className={styles.messagesWrapper} onScroll={scrollHandler}>\r\n                <div className={styles.messages}>\r\n                    {messagesElements}\r\n                    <div ref={messagesAnchorRef}></div>\r\n                </div>\r\n            </div>\r\n            <AddMessageFormRedux onSubmit={addNewMessage} />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Messages;","import { FC, useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { setDialogsThunkCreator } from '../../Redux/dialogs-reducer';\r\nimport { AppDispatchType } from '../../Redux/redux-store';\r\nimport { maxLengthCreator, required } from '../../utils/validators/validators';\r\nimport { createField, Textarea } from '../common/FormsControls/FormsControls';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport classes from './Dialogs.module.css';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { selectDialogsPage } from '../../Redux/selectors/dialogs-selectors';\r\nimport { dialogsAPI } from '../../api/dialogs-api';\r\nimport { Route } from 'react-router-dom';\r\nimport Messages from './Message/Messages';\r\nimport { Button, Col, Row } from 'antd';\r\nimport Preloader from '../common/Preloader/Preloader';\r\n\r\ntype NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: FC = () => {\r\n    const dialogsPage = useSelector(selectDialogsPage);\r\n    const dialogs = dialogsPage.dialogs;\r\n    const messages = dialogsPage.messages;\r\n    const dispatch: AppDispatchType = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setDialogsThunkCreator());\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        dispatch(setDialogsThunkCreator());\r\n    }, [messages])\r\n\r\n    let dialogsElements = dialogs.map(dialog =>\r\n        <DialogItem name={dialog.userName} key={dialog.id} id={dialog.id} photo={dialog.photos.small} />\r\n    );\r\n\r\n    if(!dialogs){\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItemsWrapper}>\r\n                <div className={classes.dialogsItems}>\r\n                    {dialogsElements}\r\n                </div>\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>\r\n                    <Route path='/dialogs/:userId/messages' render={() => <Messages dialogs={dialogs} messages={messages} />} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>;\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: FC<InjectedFormProps<NewMessageFormValuesType,\r\n    PropsType> & PropsType> = (props) => {\r\n        // const handler = async () => {\r\n        //     const responseData = await dialogsAPI.getNewMessagesCount();\r\n        //     console.log(responseData);\r\n        // }\r\n        return (\r\n            <form onSubmit={props.handleSubmit}>\r\n                <Row>\r\n                    <Col span={12}>\r\n                        <div style={{width: '600px', marginTop: '20px',  padding: '0 10px'}}>\r\n                            {createField<NewMessageFormValuesKeysType>(\"Enter your message\",\r\n                            \"newMessageBody\", [required, maxLength50], Textarea)}\r\n                        </div>\r\n                    </Col>\r\n                    <Col span={12}></Col>\r\n                    <Col span={12}>\r\n                        {/* <div><button>Send</button></div> */}\r\n                        <div style={{width: '600px', paddingRight: '10px'}}>\r\n                            <Button htmlType='submit' style={{ float: 'right'}}>Send</Button>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </form>\r\n        )\r\n    }\r\n\r\nexport const AddMessageFormRedux = reduxForm<NewMessageFormValuesType, PropsType>({\r\n    form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\nexport default withAuthRedirect(Dialogs);\r\n\r\n// Стилизовать форму отправки !\r\n// Продумать архитектуру диалогов !","import { AppStateType } from \"../redux-store\";\r\n\r\nexport const selectProfile = (state: AppStateType) => {\r\n    return state.profilePage.profile;\r\n}\r\n\r\nexport const selectProfilePhoto = (state: AppStateType) => {\r\n    return state.profilePage.profile?.photos.small;\r\n}\r\n\r\nexport const selectStatus = (state: AppStateType) => {\r\n    return state.profilePage.status;\r\n}\r\n\r\nexport const selectPostsData = (state: AppStateType) => {\r\n    return state.profilePage.postsData;\r\n}\r\n"],"names":["props","dispatch","useDispatch","className","styles","onClick","setMessagesWithUserThunkCreator","id","to","photo","src","alt","style","width","borderRadius","userPhoto","name","mapStateToPropsForRedirect","state","isAuth","auth","WrappedComponent","selectDialogsPage","dialogsPage","authorizedUserId","message","dialogPhoto","profilePhoto","useSelector","selectProfilePhoto","senderId","small","senderName","body","dialogs","messages","selectAuthorizedUserId","params","useParams","currentDialog","i","length","key","toString","userId","getCurrentDialog","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","useEffect","getUserProfileThunkCreator","current","scrollIntoView","behavior","messagesElements","map","photos","addNewMessage","values","sendMessageThunkCreator","newMessageBody","reset","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","ref","AddMessageFormRedux","onSubmit","Preloader","maxLength50","maxLengthCreator","reduxForm","form","handleSubmit","span","marginTop","padding","createField","required","Textarea","paddingRight","htmlType","float","setDialogsThunkCreator","dialogsElements","dialog","userName","classes","path","render","connect","restProps","selectProfile","profilePage","profile","selectStatus","status","selectPostsData","postsData"],"sourceRoot":""}