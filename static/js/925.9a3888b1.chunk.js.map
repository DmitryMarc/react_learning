{"version":3,"file":"static/js/925.9a3888b1.chunk.js","mappings":"oLAeMA,EAAW,WACb,IAAMC,GAA4BC,EAAAA,EAAAA,MAE5BC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,EAAAA,EAAAA,YAAU,WAEN,OADAN,GAASO,EAAAA,EAAAA,OACF,WACHP,GAASQ,EAAAA,EAAAA,UAEd,KAGC,2BACgB,UAAXN,IAAsB,0EACvB,iCACI,SAACO,EAAD,KACA,SAACC,EAAD,WAMVD,EAAe,WACjB,IAAME,GAAWR,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKM,YAC3DC,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAmBA,OAPAV,EAAAA,EAAAA,YAAU,WACa,IAAD,EAAdS,IAEA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAE3D,CAACR,KAGA,iBAAKS,MAAO,CAAEC,OAAQ,QAASC,UAAW,QAAUC,SAlBlC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACfC,KAAKC,IAAIH,EAAQI,aAAeJ,EAAQK,WAAaL,EAAQM,aAAe,KAC1EhB,GAAgBC,GAAgB,GAGjCD,GAAgBC,GAAgB,IAYpC,UACKL,EAASqB,KAAI,SAACC,EAASC,GAAV,OAAoB,SAACC,EAAD,CAA0BF,QAASA,GAArBA,EAAQG,QACxD,gBAAKC,IAAKzB,QAKhBuB,GAA+CG,EAAAA,EAAAA,OAAK,YAAkB,IAAfL,EAAc,EAAdA,QACzD,OACI,4BACI,gBAAKM,IAAKN,EAAQO,MAAOC,MAAM,UAC/B,uBAAIR,EAAQS,YACZ,kBACCT,EAAQA,SACT,wBAKNvB,EAAqB,WACvB,OAA8BI,EAAAA,EAAAA,UAAS,IAAvC,eAAOmB,EAAP,KAAgBU,EAAhB,KAEM3C,GAA4BC,EAAAA,EAAAA,MAE5BC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OACI,4BACI,0BACI,qBAAU0C,SAAU,SAACpB,GAAD,OAAOmB,EAAWnB,EAAEE,cAAcmB,QAAQA,MAAOZ,OAEzE,0BAEI,mBAAQa,SAAqB,UAAX5C,EAAoB6C,QAdvB,WAClBd,IAGLjC,GAASgD,EAAAA,EAAAA,IAAcf,IACvBU,EAAW,MASH,wBAMhB,UApGqB,WACjB,OACI,0BACI,SAAC5C,EAAD","sources":["pages/Chat/ChatPage.tsx"],"sourcesContent":["import { FC, memo, useEffect, useRef, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ChatMessageAPIType } from \"../../api/chat-api\";\r\nimport { sendMessageTC, startMessagesListeningTC, \r\n    stopMessagesListeningTC } from \"../../Redux/chat-reducer\";\r\nimport { AppDispatchType, AppStateType } from \"../../Redux/redux-store\";\r\n\r\nconst ChatPage: FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat: FC = () => {\r\n    const dispatch: AppDispatchType = useDispatch();\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListeningTC());\r\n        return () => {\r\n            dispatch(stopMessagesListeningTC());\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            {status === \"error\" && <div>Some error occured. Please refresh the page</div>}\r\n            <>\r\n                <Messages />\r\n                <AddMessageForm />\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: FC = () => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true);\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if(Math.abs(element.scrollHeight - element.scrollTop) - element.clientHeight < 300){\r\n            !isAutoScroll && setIsAutoScroll(true);\r\n        } \r\n        else {\r\n            isAutoScroll && setIsAutoScroll(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            // Скроллинг при изменении сообщений\r\n            messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{ height: '400px', overflowY: 'auto' }} onScroll={scrollHandler}>\r\n            {messages.map((message, index) => <Message key={message.id} message={message} />)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Message: FC<{ message: ChatMessageAPIType }> = memo(({ message }) => {\r\n    return (\r\n        <div>\r\n            <img src={message.photo} width=\"50px\" />\r\n            <b>{message.userName}</b>\r\n            <br />\r\n            {message.message}\r\n            <hr />\r\n        </div>\r\n    )\r\n})\r\n\r\nconst AddMessageForm: FC = () => {\r\n    const [message, setMessage] = useState('');\r\n\r\n    const dispatch: AppDispatchType = useDispatch();\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessageTC(message));\r\n        setMessage('')\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n            </div>\r\n            <div>\r\n                {/* <button disabled={webSocketChannel.readyState !== WebSocket.OPEN} onClick={sendMessage}>Send</button> */}\r\n                <button disabled={status !== 'ready'} onClick={sendMessageHandler}>Send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage;"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListeningTC","stopMessagesListeningTC","Messages","AddMessageForm","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","message","index","Message","id","ref","memo","src","photo","width","userName","setMessage","onChange","value","disabled","onClick","sendMessageTC"],"sourceRoot":""}